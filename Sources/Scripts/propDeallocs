#!/usr/bin/env bash
#
### IMPORTANT:
#
# Do this afterwards manually:
source bashlib

noop=0
while [[ $1 = -* ]]; do
    case $1 in
        -n) noop=1 ;;
        -h)
            echo "${0##*/} - by lhunath"
            echo "  Add all properties to the class' -dealloc (and create it if needed)."
            echo
            echo "Usage: ${0##*/} [-n] file"
            echo
            echo "        -n    Don't apply any changes, just show diffs of what would be changed."
            echo "      file    Either the header (.h) or the implementation (.m) file."
            echo
            echo
            echo "NOTE:"
            echo "      This is merely a tool to ease the amount of manual labour required to accomplish the task."
            echo "      Results are in no way reliable or trustworthy. Manual evaluation of the result is indispensible."
            echo
            echo
            echo "IMPORTANT:"
            echo "      After applying changes, do the following manually:"
            echo "          - Search for all properties that are assigned a [cmv]alloc pointer and free them manually in dealloc."
            exit
        ;;
    esac
    shift
done

apply() {
    if (( noop )); then
        colordiff -u "$1" "$1~" | less
    else
        mv "$1~" "$1"
    fi
}


# Initialize
c=${1%.*}; c=${c##*/}
h=${1%.*}.h
m=${1%.*}.m
propNames=()


# Phase 1
emit "Scanning for properties in $c's header and implementation"
while IFS= read -r line; do

    propName=${line##* }
    propName=${propName//[*;,]/}

    if [[ $line = *'@property'* ]]; then
        if [[ $line != *'readonly'* && $line = *retain* || $line = *copy* ]]; then
            emit $'\t'"- Property with owned reference: $propName." >&2
            propNames+=("$propName")
        fi
    fi

done < <(cat "$h" "$m")


# Phase 2
emit "Updating -dealloc in ${m##*/}"
hasdealloc=0
while IFS= read -r line; do

    if [[ $line = "@implementation $c"* ]]; then
        block=implementation
    fi
    if [[ $block = implementation && $line = -*dealloc* ]]; then
        hasdealloc=1
        method=dealloc
        methodblocks=0
    fi
    if [[ $block = implementation && $method && $line = *'{' ]]; then
        (( ++methodblocks ))
    fi
    if [[ $block = implementation && $method = dealloc && $line = *'[super dealloc]'* ]]; then
        if (( ${#propNames[@]} )); then
            emit $'\t'"- Adding missing properties: ${propNames[*]}."
            printf '    self.%s = nil;\n' "${propNames[@]}"
            echo
            propNames=()
        fi
    fi
    if [[ $block = implementation && $method = dealloc ]]; then
        for v in "${!propNames[@]}"; do
            [[ $line = *"${propNames[v]}"* ]] && {
                emit $'\t'"- Skipping: ${propNames[v]}, already being released."
                unset 'propNames[v]'
            }
        done
    fi
    if [[ $block = implementation && $method && $line = *'}' ]]; then
        if (( ! --methodblocks )); then
            case $method in
                dealloc)
                    if (( ${#propNames[@]} )); then
                        emit $'\t'"- Adding missing properties: ${propNames[*]}, and [super dealloc]."
                        printf '    self.%s = nil;\n' "${propNames[@]}"
                        echo
                        echo "    [super dealloc];"
                        propNames=()
                    fi
                ;;
            esac
            method=
        fi
    fi
    if [[ $line = '@end'* ]]; then
        if [[ $block = implementation ]] && (( ! hasdealloc )); then
            emit $'\t'"- Adding missing -dealloc and properties: ${propNames[*]}."

            echo "- (void)dealloc {"
            echo
            printf '    self.%s = nil;\n' "${propNames[@]}"
            echo
            echo "    [super dealloc];"
            echo "}"
            echo
            propNames=()
        fi

        block=
    fi

    echo "$line"

done < "$m" > "$m~"
apply "$m"
