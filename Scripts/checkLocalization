#! /usr/bin/env bash
source bashlib

isIn() {
    local key=$1; shift

    for value
    do [[ $value = "$key" ]] && return; done
}

cd "${0%/*}/../"

healthy=1
(( $# )) && modules=("$@") || modules=(Pearl*/)
for module in "${modules[@]}"; do
    module=${module%/}
    cd "$module"
    echo; emit "Checking $module"

    emit " - Enumerating localization keys"
    code=$(find !(Resources) -type f -name '*.m' -exec gsed -rn 's/.*(NSLocalizedString|l)\(@"([^"]*)".*/\2/p' {} +)
    code+=$([[ -e ${module//-}Strings.h ]] && gsed -n -e 's/\([[:lower:]]\)\([[:upper:]]\)/\1.\L\2/g' -e 's/^@property.*\*\([^;]*\);/\1/p' "${module//-}"Strings.h)
    code=$(sort -u <<< "$code")
    emit "    code:          $([[ $code ]] && wc -l <<< "$code" || echo 0)"
    lang=() lproj=()
    for l in Resources/*.lproj/"$module".strings; do
        [[ -e $l ]] || continue
        k=${l#*/}; k=${k%%/*}

        lang+=( "$k" )
        lproj+=( "$(sed -n 's/^"\([^"]*\)".*/\1/p' "$l" | sort -u)" )
        emit "    $k: $(printf "${lproj[${#lproj}-1]}" | wc -l)"
    done

    emit " - Looking for unused localization keys"
    for l in ${!lang[@]}; do
        while read; do
            [[ $REPLY ]] || continue

            healthy=0
            emit -y "   ${lang[l]}: ${REPLY##*([[:space:]])} "
        done < <(comm -1 -3 <(printf '%s\n' "$code") <(printf '%s\n' "${lproj[l]}"))
    done

    emit " - Looking for missing localization keys"
    for l in ${!lang[@]}; do
        while read; do
            [[ $REPLY ]] || continue

            healthy=0
            emit -r "   ${lang[l]}: ${REPLY##*([[:space:]])} "
        done < <(comm -2 -3 <(printf '%s\n' "$code") <(printf '%s\n' "${lproj[l]}"))
    done

    cd ..
done

(( healthy )) && emit "All good."
